# -*- coding: utf-8 -*-
"""Hate speech detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IBt1dLwnJ8oiqn6cl3FQwcHU9PPpM339
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import re
import string
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

from sklearn.svm import LinearSVC
from sklearn.ensemble import RandomForestClassifier
import joblib

df = pd.read_csv("hate_speech_detection_train.csv")
df.head()

df.isnull().sum()

df['class'].value_counts()

df.shape

sns.countplot(x='class', data=df)
plt.title("Class Distribution")

nltk.download('stopwords')
nltk.download('wordnet')

stop_words = set(stopwords.words("english"))
lemmatizer = WordNetLemmatizer()

def clean_text(text):
    text = text.lower()
    text = re.sub(r"http\S+|www\S+|https\S+", '', text)  # remove URLs
    text = re.sub(r'\@[\w]*', '', text)  # remove @mentions
    text = re.sub(r'[^A-Za-z\s]', '', text)  # remove non-letters
    words = text.split()
    words = [lemmatizer.lemmatize(word) for word in words if word not in stop_words]
    return ' '.join(words)

df['clean_tweet'] = df['tweet'].apply(clean_text)

vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(df['clean_tweet'])
y = df['class']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred, target_names=['Hate Speech', 'Offensive', 'Neither']))

# Confusion matrix
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues',
            xticklabels=['Hate', 'Offensive', 'Neither'],
            yticklabels=['Hate', 'Offensive', 'Neither'])
plt.title("Confusion Matrix")
plt.show()

import joblib

# Save model
joblib.dump(model, 'hate_speech_model.pkl')

# Save vectorizer
joblib.dump(vectorizer, 'tfidf_vectorizer.pkl')

# Load model
loaded_model = joblib.load('hate_speech_model.pkl')

# Load vectorizer
loaded_vectorizer = joblib.load('tfidf_vectorizer.pkl')

# Example use
sample = ["You are stupid and ugly!"]
cleaned_sample = [clean_text(sample[0])]
vectorized = loaded_vectorizer.transform(cleaned_sample)
prediction = loaded_model.predict(vectorized)
print("Predicted class:", prediction[0])

from google.colab import files
files.download('tfidf_vectorizer.pkl')
files.download('hate_speech_model.pkl')

# Train SVM
svm_model = LinearSVC()
svm_model.fit(X_train, y_train)
joblib.dump(svm_model, 'svm_model.pkl')

# Train Random Forest
rf_model = RandomForestClassifier()
rf_model.fit(X_train, y_train)
joblib.dump(rf_model, 'rf_model.pkl')

files.download('svm_model.pkl')
files.download('rf_model.pkl')

